<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.group8.dao.LgGroupDao">

    <resultMap id="BaseResultMap" type="com.group8.entity.LgGroup">
        <!--@Table lg_group-->
        <result property="groupId" column="group_id" jdbcType="INTEGER"/>
        <result property="bussId" column="buss_id" jdbcType="INTEGER"/>
        <result property="groupName" column="group_name" jdbcType="VARCHAR"/>
        <result property="groupSold" column="group_sold" jdbcType="VARCHAR"/>
        <result property="groupScore" column="group_score" jdbcType="VARCHAR"/>
        <result property="groupFavorites" column="group_favorites" jdbcType="VARCHAR"/>
        <result property="groupIntroduce" column="group_introduce" jdbcType="VARCHAR"/>
        <result property="groupRoute" column="group_route" jdbcType="VARCHAR"/>
        <result property="groupFeeExplanation" column="group_fee_explanation" jdbcType="VARCHAR"/>
        <result property="groupDestineNotice" column="group_destine_notice" jdbcType="VARCHAR"/>
        <result property="groupPurchaseNotice" column="group_purchase_notice" jdbcType="VARCHAR"/>
        <result property="groupDeparture" column="group_departure" jdbcType="VARCHAR"/>
        <result property="groupStatus" column="group_status" jdbcType="INTEGER"/>
        <result property="createdBy" column="created_by" jdbcType="VARCHAR"/>
        <result property="createdTime" column="created_time" jdbcType="TIMESTAMP"/>
        <result property="updatedBy" column="updated_by" jdbcType="VARCHAR"/>
        <result property="updatedTime" column="updated_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="BaseResultMap">
        select group_id,
               buss_id,
               group_name,
               group_sold,
               group_score,
               group_favorites,
               group_introduce,
               group_route,
               group_fee_explanation,
               group_destine_notice,
               group_purchase_notice,
               group_departure,
               group_status,
               created_by,
               created_time,
               updated_by,
               updated_time
        from lg.lg_group
        where group_id = #{groupId}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BaseResultMap">
        select group_id,
               buss_id,
               group_name,
               group_sold,
               group_score,
               group_favorites,
               group_introduce,
               group_route,
               group_fee_explanation,
               group_destine_notice,
               group_purchase_notice,
               group_departure,
               group_status,
               created_by,
               created_time,
               updated_by,
               updated_time
        from lg.lg_group limit #{offset}, #{limit}
    </select>


    <select id="queryAll" resultMap="BaseResultMap">
        select *
        from lg.lg_group

    </select>
    <select id="avgmark" resultType="integer">
        SELECT AVG(mark)
        FROM lg_comment_group
        WHERE pid = #{pid};
    </select>
    <select id="sorting" resultType="com.group8.entity.LgGroup">
        SELECT *
        FROM lg_group
        ORDER BY group_sold = #{groupSold} DESC;
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="lgGroup.groupId" useGeneratedKeys="true">
        insert into lg.lg_group(buss_id, group_name, group_sold, group_score, group_favorites, group_introduce,
                                group_route, group_fee_explanation, group_destine_notice, group_purchase_notice,
                                group_departure, group_status, created_by, created_time, updated_by, updated_time)
        values (#{lgGroup.bussId}, #{lgGroup.groupName}, #{lgGroup.groupSold}, #{lgGroup.groupScore},
                #{lgGroup.groupFavorites}, #{lgGroup.groupIntroduce},
                #{lgGroup.groupRoute}, #{lgGroup.groupFeeExplanation}, #{lgGroup.groupDestineNotice},
                #{lgGroup.groupPurchaseNotice}, #{lgGroup.groupDeparture},
                #{lgGroup.groupStatus}, #{lgGroup.createdBy}, #{lgGroup.createdTime}, #{lgGroup.updatedBy},
                #{lgGroup.updatedTime})
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update lg.lg_group
        <set>
            <if test="bussId != null">
                buss_id = #{bussId},
            </if>
            <if test="groupName != null and groupName != ''">
                group_name = #{groupName},
            </if>
            <if test="groupSold != null and groupSold != ''">
                group_sold = #{groupSold},
            </if>
            <if test="groupScore != null and groupScore != ''">
                group_score = #{groupScore},
            </if>
            <if test="groupFavorites != null and groupFavorites != ''">
                group_favorites = #{groupFavorites}
            </if>
            <if test="groupIntroduce != null and groupIntroduce != ''">
                group_introduce = #{groupIntroduce},
            </if>
            <if test="groupRoute != null and groupRoute != ''">
                group_route = #{groupRoute},
            </if>
            <if test="groupFeeExplanation != null and groupFeeExplanation != ''">
                group_fee_explanation = #{groupFeeExplanation},
            </if>
            <if test="groupDestineNotice != null and groupDestineNotice != ''">
                group_destine_notice = #{groupDestineNotice},
            </if>
            <if test="groupPurchaseNotice != null and groupPurchaseNotice != ''">
                group_purchase_notice = #{groupPurchaseNotice},
            </if>
            <if test="groupDeparture != null and groupDeparture != ''">
                group_departure = #{groupDeparture},
            </if>
            <if test="groupStatus != null">
                group_status = #{groupStatus},
            </if>
            <if test="createdBy != null and createdBy != ''">
                created_by = #{createdBy},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime},
            </if>
            <if test="updatedBy != null and updatedBy != ''">
                updated_by = #{updatedBy},
            </if>
            <if test="updatedTime != null">
                updated_time = #{updatedTime},
            </if>
        </set>
        where group_id = #{groupId}
    </update>
    <update id="upates">
        update lg_group
        set group_score = (select cast(AVG(mark) AS DECIMAL(10, 2)) from lg_comment_group where pid = #{pid})
        where group_id = #{pid}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from lg.lg_group
        where group_id = #{groupId}
    </delete>

</mapper>